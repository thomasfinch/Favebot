//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import "NSObject.h"

#import "T1ProfileDataSource.h"

@class NSArray, NSMutableArray, NSNumber, NSString, TFNTwitterAccount, TFNTwitterEntitySet, TFNTwitterEntityURL, TFNTwitterUser, UIColor, UIImage;

__attribute__((visibility("hidden")))
@interface T1ProfileUserDataSource : NSObject <T1ProfileDataSource>
{
    double _lastRefreshTime;
    BOOL _loadedOnce;
    BOOL _hasRequestedGenericUserRecommendations;
    BOOL _hasRequestedClusterFollowRecommendations;
    int _lastError;
    BOOL _dataReady;
    BOOL _observingAccountNotifications;
    BOOL _observingUserNotifications;
    BOOL _observingProfileBannerNotifications;
    BOOL _requestingWTFUserRecommendations;
    BOOL _deferringAPIRequests;
    UIImage *_avatarImage;
    UIImage *_bannerImage;
    NSArray *_userRecommendations;
    TFNTwitterUser *_user;
    NSString *_socialProofText;
    NSArray *_clusterFollowRecommendations;
    NSString *_profileBannerURL;
    TFNTwitterAccount *_viewerAccount;
    NSMutableArray *_deferredAPIRequestBlocks;
}

@property(nonatomic, getter=isDeferringAPIRequests) BOOL deferringAPIRequests; // @synthesize deferringAPIRequests=_deferringAPIRequests;
@property(readonly, nonatomic) NSMutableArray *deferredAPIRequestBlocks; // @synthesize deferredAPIRequestBlocks=_deferredAPIRequestBlocks;
@property(nonatomic, getter=isRequestingWTFUserRecommendations) BOOL requestingWTFUserRecommendations; // @synthesize requestingWTFUserRecommendations=_requestingWTFUserRecommendations;
@property(nonatomic, getter=isObservingProfileBannerNotifications) BOOL observingProfileBannerNotifications; // @synthesize observingProfileBannerNotifications=_observingProfileBannerNotifications;
@property(nonatomic, getter=isObservingUserNotifications) BOOL observingUserNotifications; // @synthesize observingUserNotifications=_observingUserNotifications;
@property(nonatomic, getter=isObservingAccountNotifications) BOOL observingAccountNotifications; // @synthesize observingAccountNotifications=_observingAccountNotifications;
@property(readonly, nonatomic) TFNTwitterAccount *viewerAccount; // @synthesize viewerAccount=_viewerAccount;
@property(nonatomic, getter=isDataReady) BOOL dataReady; // @synthesize dataReady=_dataReady;
@property(copy, nonatomic) NSString *profileBannerURL; // @synthesize profileBannerURL=_profileBannerURL;
@property(copy, nonatomic) NSArray *clusterFollowRecommendations; // @synthesize clusterFollowRecommendations=_clusterFollowRecommendations;
@property(copy, nonatomic) NSString *socialProofText; // @synthesize socialProofText=_socialProofText;
@property(retain, nonatomic) TFNTwitterUser *user; // @synthesize user=_user;
@property(copy, nonatomic) NSArray *userRecommendations; // @synthesize userRecommendations=_userRecommendations;
- (void).cxx_destruct;
- (void)_userDidBlockingUpdate:(id)arg1;
- (void)_userDidUpdate:(id)arg1;
- (void)_userDidUnfollow:(id)arg1;
- (void)_userDidUpdateProfileImage:(id)arg1;
- (void)_userDidUpdateProfileBannerImage:(id)arg1;
- (void)_recommendedUserDidUpdate:(id)arg1;
- (void)_followerRequestsDidUpdate:(id)arg1;
- (void)_accountSettingsDidUpdate:(id)arg1;
- (void)_accountSettingsPropertyDidChange:(id)arg1;
- (void)_accountDidUpdate:(id)arg1;
- (void)_stopObservingUserNotifications;
- (void)_stopObservingProfileBannerNotifications;
- (void)_stopObservingAccountNotifications;
- (void)_startObservingUserNotifications;
- (void)_startObservingProfileBannerNotifications;
- (void)_startObservingAccountNotifications;
- (void)_sendPartialUserRequests:(BOOL)arg1;
- (void)_sendNonPartialUserRequests:(BOOL)arg1;
- (void)_receiveRecommendationsForUsersSimilarToUserResponseWithRecommendationType:(unsigned int)arg1 success:(BOOL)arg2 result:(id)arg3 error:(id)arg4;
- (void)_receiveUserResponseWithSuccess:(BOOL)arg1 result:(id)arg2 error:(id)arg3;
- (void)_requestUserWithUserID:(id)arg1 username:(id)arg2;
- (void)_requestRelationshipLookupForUsers:(id)arg1 invalidatingWithReason:(int)arg2;
- (void)_requestAccountCredentialsVerification;
- (void)_requestRecommendationsForUsersSimilarToUserID:(id)arg1 username:(id)arg2 recommendationType:(unsigned int)arg3 exclusionIDs:(id)arg4;
- (BOOL)_shouldReload;
- (void)_loadData:(BOOL)arg1 previousError:(int)arg2;
- (void)_invalidateForReason:(int)arg1;
- (void)invalidateData;
- (void)requestClusterFollowRecommendationsIfNeeded;
- (void)_relationshipStatusDidUpdate:(id)arg1;
- (void)reloadRelationship;
@property(readonly, nonatomic) unsigned int followerRequestCount;
@property(readonly, nonatomic) int followingCount;
@property(readonly, nonatomic) int followerCount;
@property(readonly, nonatomic) NSNumber *favoriteTweetCount;
@property(readonly, nonatomic) NSNumber *mediaTweetCount;
@property(readonly, nonatomic) NSNumber *tweetCount;
- (BOOL)viewerCanDM;
@property(readonly, nonatomic) BOOL hasPendingFollowRequest;
@property(readonly, nonatomic, getter=isViewerDeviceFollowing) BOOL viewerDeviceFollowing;
@property(readonly, nonatomic, getter=isTwitterAlertsActivatedByViewer) BOOL twitterAlertsActivatedByViewer;
@property(readonly, nonatomic, getter=isMutedByViewer) BOOL mutedByViewer;
@property(readonly, nonatomic, getter=isBlockedByViewer) BOOL blockedByViewer;
@property(readonly, nonatomic, getter=isFollowedByViewer) BOOL followedByViewer;
@property(readonly, nonatomic, getter=isFollowingViewer) BOOL followingViewer;
@property(readonly, nonatomic, getter=isUserRelationshipReady) BOOL userRelationshipReady;
@property(readonly, nonatomic, getter=isTwitterAlertsInstitution) BOOL twitterAlertsInstitution;
@property(readonly, nonatomic, getter=isProtectedAccount) BOOL protectedAccount;
@property(readonly, nonatomic, getter=isVerifiedAccount) BOOL verifiedAccount;
@property(readonly, nonatomic, getter=isViewingOwnProfile) BOOL viewingOwnProfile;
@property(readonly, nonatomic) UIColor *profileLinkColor;
@property(readonly, nonatomic) UIImage *bannerImage; // @synthesize bannerImage=_bannerImage;
@property(readonly, nonatomic) UIImage *avatarImage; // @synthesize avatarImage=_avatarImage;
@property(readonly, nonatomic) TFNTwitterEntityURL *entityURL;
@property(readonly, copy, nonatomic) NSString *url;
@property(readonly, nonatomic) TFNTwitterEntitySet *bioEntities;
@property(readonly, copy, nonatomic) NSString *bio;
@property(readonly, copy, nonatomic) NSString *location;
@property(readonly, copy, nonatomic) NSString *fullName;
@property(readonly, copy, nonatomic) NSString *username;
- (void)dealloc;
- (id)initWithUser:(id)arg1 viewerAccount:(id)arg2;

@end

