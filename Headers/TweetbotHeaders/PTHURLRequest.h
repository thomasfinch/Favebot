/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: (null)
 */

#import "NSURLSessionDownloadDelegate.h"
#import <XXUnknownSuperclass.h> // Unknown library

@class NSMutableDictionary, NSDictionary, NSData, NSString, NSObject, NSMutableData, NSURL, NSURLSession, NSURLSessionTask, NSHTTPURLResponse, NSError, NSURLCredential, NSURLRequest, PTHURLRequestMimePostData;
@protocol OS_dispatch_semaphore;

@interface PTHURLRequest : XXUnknownSuperclass <NSURLSessionDownloadDelegate> {
	NSURLSession* _session;
	NSURLSessionTask* _sessionTask;
	NSObject<OS_dispatch_semaphore>* _synchronousSemaphore;
	NSMutableData* _responseData;
	NSHTTPURLResponse* _response;
	id _responseBlock;
	id _progressBlock;
	id _streamBlock;
	BOOL _startedOnMain;
	NSMutableDictionary* _debugDictionary;
	unsigned _backgroundTaskIdentifier;
	BOOL _busy;
	BOOL _cookiesEnabled;
	BOOL _networkActivityEnabled;
	BOOL _continueInBackground;
	NSURL* _url;
	unsigned _responseType;
	NSDictionary* _postDictionary;
	PTHURLRequestMimePostData* _mimePostData;
	NSData* _postData;
	unsigned _postContentType;
	NSDictionary* _queryDictionary;
	NSDictionary* _headerDictionary;
	unsigned _requestMethod;
	NSError* _error;
	NSURLCredential* _credential;
	NSString* _filename;
	NSString* _username;
	NSString* _password;
	NSURLRequest* _urlRequest;
	double _timeoutIntervalForRequest;
	double _timeoutIntervalForResource;
}
@property(readonly, assign, nonatomic) NSURL* urlWithParams;
@property(readonly, assign, nonatomic) NSMutableDictionary* debugDictionary;
@property(assign, nonatomic) BOOL continueInBackground;
@property(assign, nonatomic, getter=isNetworkActivityEnabled) BOOL networkActivityEnabled;
@property(retain, nonatomic) NSURLRequest* urlRequest;
@property(copy, nonatomic) NSString* password;
@property(copy, nonatomic) NSString* username;
@property(copy, nonatomic) NSString* filename;
@property(retain, nonatomic) NSURLCredential* credential;
@property(assign, nonatomic) BOOL cookiesEnabled;
@property(readonly, assign, nonatomic) NSError* error;
@property(readonly, assign, nonatomic) NSHTTPURLResponse* response;
@property(assign, nonatomic) double timeoutIntervalForResource;
@property(assign, nonatomic) double timeoutIntervalForRequest;
@property(readonly, assign, nonatomic) NSString* requestMethodString;
@property(assign, nonatomic) unsigned requestMethod;
@property(copy, nonatomic) NSDictionary* headerDictionary;
@property(copy, nonatomic) NSDictionary* queryDictionary;
@property(assign, nonatomic) unsigned postContentType;
@property(copy, nonatomic) NSData* postData;
@property(copy, nonatomic) PTHURLRequestMimePostData* mimePostData;
@property(copy, nonatomic) NSDictionary* postDictionary;
@property(assign, nonatomic) unsigned responseType;
@property(copy, nonatomic) NSURL* url;
@property(readonly, assign, nonatomic, getter=isBusy) BOOL busy;
+(id)systemInformation;
+(id)networkErrorWithStatusCode:(int)statusCode;
+(id)decodingError;
+(id)userCancelledError;
+(id)timeoutError;
+(id)busyError;
-(void).cxx_destruct;
-(id)description;
-(void)_didFinish;
-(id)newValueFromData:(id)data error:(id*)error;
-(void)cancel;
-(void)URLSession:(id)session task:(id)task didReceiveChallenge:(id)challenge completionHandler:(id)handler;
-(void)URLSession:(id)session dataTask:(id)task willCacheResponse:(id)response completionHandler:(id)handler;
-(void)URLSession:(id)session dataTask:(id)task didReceiveData:(id)data;
-(void)URLSession:(id)session dataTask:(id)task didReceiveResponse:(id)response completionHandler:(id)handler;
-(void)URLSession:(id)session task:(id)task didSendBodyData:(long long)data totalBytesSent:(long long)sent totalBytesExpectedToSend:(long long)send;
-(void)URLSession:(id)session downloadTask:(id)task didWriteData:(long long)data totalBytesWritten:(long long)written totalBytesExpectedToWrite:(long long)write;
-(void)URLSession:(id)session downloadTask:(id)task didResumeAtOffset:(long long)offset expectedTotalBytes:(long long)bytes;
-(void)URLSession:(id)session downloadTask:(id)task didFinishDownloadingToURL:(id)url;
-(void)URLSession:(id)session task:(id)task didCompleteWithError:(id)error;
-(void)startStreaming:(id)streaming response:(id)response;
-(void)startSynchronous:(id)synchronous;
-(void)startSynchronousWithProgress:(id)progress response:(id)response;
-(void)start:(id)start;
-(void)startWithProgress:(id)progress response:(id)response;
-(BOOL)_startSynchronous:(BOOL)synchronous;
-(void)addSystemInformation;
-(id)init;
@end

